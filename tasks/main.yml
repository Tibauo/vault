---
# tasks file for vault
- name: Ensure Vault is defines in /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: "^{{ ansible_default_ipv4.address }}"
    line: "{{ansible_default_ipv4.address }} {{ ansible_fqdn }} {{ ansible_hostname }}"
    owner: root
    group: root
    mode: '0644'

- name: Check if Vault is already installed
  ansible.builtin.stat:
    path: "{{ vault_conf_dir }}/vault.hcl"
  register: register_name

- name: Enable vault port 
  ansible.posix.firewalld:
    port: 8200-8201/tcp
    permanent: true
    state: enabled

- block:
    - name: Install unzip
      ansible.builtin.dnf:
        name: unzip
        state: present
    
    - name: Download vault
      ansible.builtin.get_url:
        url: "{{ vault_url }}"
        dest: /tmp/
    
    - name: Create vault directory
      ansible.builtin.file:
        path: "{{ item }}"
        recurse: yes
        state: directory
      loop:
        - "{{ vault_bin_dir }}"
        - "{{ vault_data_dir }}"
        - "{{ vault_conf_dir }}"
    
    - name: Unzip vault zip
      ansible.builtin.unarchive:
        src: /tmp/{{ vault_zip }}
        dest: "{{ vault_bin_dir }}"
        remote_src: yes
    
    - name: Push template
      ansible.builtin.template:
        src: vault.hcl.j2	
        dest: "{{ vault_conf_dir }}/vault.hcl"

    - name: Push service
      ansible.builtin.template:
        src: vault.service.j2
        dest: /etc/systemd/system/vault.service
    
    - name: Start vault
      ansible.builtin.systemd:
        state: started
        name: vault
    
    - name: Initialise
      ansible.builtin.uri:
        url: "http://{{ ansible_fqdn }}:8200/v1/sys/init"
        body_format: json
        body: "{\"secret_shares\":1, \"secret_threshold\":1}"
        method: POST
        dest: "{{ vault_conf_dir }}/init_output"
      register: url
    - set_fact:
        vault_init: "{{ url.json }}"

  when: not register_name.stat.exists

- block:
  - name: Read vault input
    ansible.builtin.slurp:
      src: "{{ vault_conf_dir }}/init_output"
    register: slurp

  - name: set fact
    set_fact:
      vault_init: "{{ (slurp.content|b64decode|from_json) }}"
  when: register_name.stat.exists

- name: Unseal vault
  ansible.builtin.uri:
    url: http://172.17.1.30:8200/v1/sys/unseal
    method: PUT
    body:
      key: "{{ vault_init.keys_base64[0] }}"
    body_format: json

- name: Push template
  ansible.builtin.template:
    src: admin-policy.json.j2
    dest: "{{ vault_conf_dir }}/admin-policy.json"

- name: Configure admin policy
  ansible.builtin.uri:
    url: "http://{{ ansible_fqdn }}:8200/v1/sys/policies/acl/admin"
    method: PUT
    headers:
      X-Vault-Token: "{{ vault_init.root_token }}"
    body_format: json
    src: "{{ vault_conf_dir }}/admin-policy.json"
    remote_src: true
    status_code: 204,400

- name: Configure PKI
  ansible.builtin.uri:
    url: "http://{{ ansible_fqdn }}:8200/v1/sys/mounts/{{ item }}"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_init.root_token }}"
    body:
      type: pki
    body_format: json
    status_code: 204,400
  loop:
    - pki
    - pki_int

- name: Configure TTL
  ansible.builtin.uri:
    url: "http://{{ ansible_fqdn }}:8200/v1/sys/mounts/pki/tune"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_init.root_token }}"
    body:
      max_lease_ttl: 8750h
    body_format: json
    status_code: 204,400

- name: Generate PKI
  ansible.builtin.uri:
    url: "http://{{ ansible_fqdn }}:8200/v1/pki/root/generate/internal"
    method: GET
    headers:
      X-Vault-Token: "{{ vault_init.root_token }}"
    body:
      "common_name": "example.com"
      "issuer_name": "root-2022"
    body_format: json
    status_code: 200,204,404,500
  register: statuscode

- name: Check ROOTCA
  ansible.builtin.uri:
    url: "http://{{ ansible_fqdn }}:8200/v1/pki/issuer/{{ ansible }}"
    method: GET
    headers:
      X-Vault-Token: "{{ vault_init.root_token }}"
    body_format: json
    status_code: 200,204,404,500
  register: statuscode
